// Code generated by goyacc -o parser.go parser.yy. DO NOT EDIT.

//line parser.yy:3
package pluralsparser

import __yyfmt__ "fmt"

//line parser.yy:3

import (
	"log"
	"strconv"
	"strings"
	"unicode/utf8"
)

type driver struct {
	Result    uint64
	Variables map[string]uint64
}

var drv = driver{}

//line parser.yy:20
type yySymType struct {
	yys int
	num uint64
	str string
}

const tokIDENTIFIER = 57346
const tokNUMBER = 57347
const tokMOD = 57348
const tokTHEN = 57349
const tokELSE = 57350
const tokLT = 57351
const tokLE = 57352
const tokGT = 57353
const tokGE = 57354
const tokEQ = 57355
const tokNE = 57356
const tokAND = 57357
const tokOR = 57358
const tokLPAREN = 57359
const tokRPAREN = 57360

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"tokIDENTIFIER",
	"tokNUMBER",
	"tokMOD",
	"tokTHEN",
	"tokELSE",
	"tokLT",
	"tokLE",
	"tokGT",
	"tokGE",
	"tokEQ",
	"tokNE",
	"tokAND",
	"tokOR",
	"tokLPAREN",
	"tokRPAREN",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.yy:165

const eof = 0

type yyLex struct {
	line []byte
	peek rune
	idx  int
	orig []byte
}

var isNumber = map[rune]bool{
	'0': true,
	'1': true,
	'2': true,
	'3': true,
	'4': true,
	'5': true,
	'6': true,
	'7': true,
	'8': true,
	'9': true,
}

var isWhitespace = map[rune]bool{
	' ':  true,
	'\t': true,
	'\n': true,
	'\r': true,
}

func (x *yyLex) Lex(yylval *yySymType) (res int) {
	for {
		c := x.next()
		p := x.peek
		switch {
		case c == eof:
			return eof
		case c == '0':
			yylval.num = 0
			return tokNUMBER
		case isNumber[c]:
			return x.num(c, yylval)
		case c == '>' && p != '=':
			return tokGT
		case c == '>' && p == '=':
			x.next()
			return tokGE
		case c == '<' && p != '=':
			return tokLT
		case c == '<' && p == '=':
			x.next()
			return tokLE
		case c == '%':
			return tokMOD
		case c == '&' && p == '&':
			x.next()
			return tokAND
		case c == '|' && p == '|':
			x.next()
			return tokOR
		case c == '!' && p == '=':
			x.next()
			return tokNE
		case c == '=' && p == '=':
			x.next()
			return tokEQ
		case c == '?':
			return tokTHEN
		case c == ':':
			return tokELSE
		case c == '(':
			return tokLPAREN
		case c == ')':
			return tokRPAREN
		case c == 'n':
			yylval.str = string(c)
			return tokIDENTIFIER
		case isWhitespace[c]:
		default:
			log.Printf("unrecognized character %q", c)
		}
	}
}

func (x *yyLex) num(c rune, yylval *yySymType) int {
	add := func(b *strings.Builder, c rune) {
		if _, err := b.WriteRune(c); err != nil {
			log.Fatalf("WriteRune: %s", err)
		}
	}
	b := strings.Builder{}
	add(&b, c)
L:
	for {
		switch {
		case isNumber[x.peek]:
			c = x.next()
			add(&b, c)
		default:
			break L
		}
	}
	var err error
	yylval.num, err = strconv.ParseUint(b.String(), 10, 64)
	if err != nil {
		log.Printf("ERRtokOR: %s. Bad number %q", err, b.String())
		return eof
	}
	return tokNUMBER
}

func (x *yyLex) next() rune {
	x.idx++
	r := x.peek
	c, size := utf8.DecodeRune(x.line)
	x.line = x.line[size:]
	if size == 0 {
		c = eof
	}
	x.peek = c
	return r
}

func (x *yyLex) Error(s string) {
	log.Printf("parse error: %s\n", s)
	log.Printf("%s\n", x.orig)
	ss := strings.Builder{}
	for i := 0; i < x.idx+1; i++ {
		if x.idx == i {
			ss.WriteRune('^')
		} else {
			ss.WriteRune(' ')
		}
	}
	log.Printf("%s\n", ss.String())
}

func NewLexer(line []byte) *yyLex {
	c, size := utf8.DecodeRune(line)
	return &yyLex{
		line: line[size:],
		peek: c,
		idx:  -1,
		orig: line,
	}
}

func Evaluate(expression string, n uint64) uint64 {
	yyErrorVerbose = true
	drv.Variables = map[string]uint64{"n": n}
	drv.Result = 0
	yyParse(NewLexer([]byte(expression)))
	return drv.Result
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 56

var yyAct = [...]int{
	2, 3, 13, 33, 13, 14, 15, 16, 17, 18,
	19, 20, 22, 23, 34, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 13, 12, 1, 14, 15, 16,
	17, 18, 19, 20, 21, 35, 13, 5, 4, 14,
	15, 16, 17, 18, 19, 10, 9, 8, 13, 6,
	11, 14, 15, 16, 17, 7,
}

var yyPact = [...]int{
	33, -1000, -1000, 18, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, -15, 6, -1000, -2, -2, -2, -2, 42,
	42, 30, -4, -1000, 33, -1000,
}

var yyPgo = [...]int{
	0, 1, 0, 55, 49, 47, 46, 45, 26,
}

var yyR1 = [...]int{
	0, 8, 2, 2, 3, 4, 5, 5, 5, 5,
	6, 6, 7, 7, 1, 1, 1, 1, 1, 1,
	1,
}

var yyR2 = [...]int{
	0, 1, 1, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -8, -2, -1, 5, 4, -4, -3, -5, -6,
	-7, 17, 7, 6, 9, 10, 11, 12, 13, 14,
	15, 16, -2, -2, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 18, 8, -2,
}

var yyDef = [...]int{
	0, -2, 1, 2, 14, 15, 16, 17, 18, 19,
	20, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 6, 7, 8, 9, 10,
	11, 12, 13, 5, 0, 3,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.yy:65
		{
			drv.Result = yyDollar[1].num
		}
	case 3:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.yy:70
		{
			if yyDollar[1].num != 0 {
				yyVAL.num = yyDollar[3].num
			} else {
				yyVAL.num = yyDollar[5].num
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:79
		{
			yyVAL.num = yyDollar[1].num % yyDollar[3].num
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:81
		{
			yyVAL.num = yyDollar[2].num
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:85
		{
			if yyDollar[1].num < yyDollar[3].num {
				yyVAL.num = 1
			} else {
				yyVAL.num = 0
			}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:93
		{
			if yyDollar[1].num <= yyDollar[3].num {
				yyVAL.num = 1
			} else {
				yyVAL.num = 0
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:101
		{
			if yyDollar[1].num > yyDollar[3].num {
				yyVAL.num = 1
			} else {
				yyVAL.num = 0
			}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:109
		{
			if yyDollar[1].num >= yyDollar[3].num {
				yyVAL.num = 1
			} else {
				yyVAL.num = 0
			}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:120
		{
			if yyDollar[1].num == yyDollar[3].num {
				yyVAL.num = 1
			} else {
				yyVAL.num = 0
			}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:128
		{
			if yyDollar[1].num != yyDollar[3].num {
				yyVAL.num = 1
			} else {
				yyVAL.num = 0
			}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:139
		{
			if yyDollar[1].num != 0 && yyDollar[3].num != 0 {
				yyVAL.num = 1
			} else {
				yyVAL.num = 0
			}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.yy:147
		{
			if yyDollar[1].num != 0 || yyDollar[3].num != 0 {
				yyVAL.num = 1
			} else {
				yyVAL.num = 0
			}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.yy:158
		{
			yyVAL.num = drv.Variables[yyDollar[1].str]
		}
	}
	goto yystack /* stack new state and value */
}
